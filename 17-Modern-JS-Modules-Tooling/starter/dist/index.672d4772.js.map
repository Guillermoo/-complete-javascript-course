{"mappings":"","sources":["script.js"],"sourcesContent":["// Importing module\n// import {\n//   addToCart,\n//   totalPrice as price,\n//   totalQuantity,\n// } from './shoppingCart.js';\n// addToCart('bread', 4);\n// console.log(price, totalQuantity);\n\n/* console.log('Importing module');\n\n// import * as ShoppingCart from './shoppingCart.js';\n\n// ShoppingCart.addToCart('bread', 5);\n\n// console.log(ShoppingCart.totalPrice);\n\nimport add, { cart } from './shoppingCart.js'; //default export\nadd('pizza', 2);\nadd('bread', 5);\nadd('apples', 4);\n\nconsole.log(cart); // cart no est'a vacio, quiere decir que la variable cart no es una copia, es el mismo objeto.\n\n// console.log('Start Fetching');\n// const res = await fetch('https://jsonplaceholder.typicode.com/posts');\n// const data = await res.json();\n// console.log(data);\n// console.log('Something');\n// Aunque es await el consolelog Something no se ejecutara hasta que se cargue todo el data.\n\nconst getLastPost = async function () {\n  const res = await fetch('https://jsonplaceholder.typicode.com/posts');\n  const data = await res.json();\n  return { title: data.at(-1).title, text: data.at(-1).body };\n};\n\nconst lastPost = getLastPost();\nconsole.log(lastPost); // Nos devovlera un promise, lo siguiente lo soluciona\n\n//Lo soluciona pero no es la mejor opcion\n//lastPost.then(last => console.log(last));\n\n//Esta es la mejor opcion\nconst lastPost2 = await getLastPost();\nconsole.log(lastPost2);\n// Conclusion, mejor no usar el await fuera de un async */\n\n// ----------- Patron module ----------------\n/* const ShoppingCart2 = (function () {\n  const cart = [];\n  const shippingCost = 10;\n  const totalPrice = 237;\n  const totalQuantiy = 23;\n\n  const addToCart = function (product, quantity) {\n    cart.push({ product, quantity });\n    console.log(`${quantity} ${product} added to the cart`);\n  };\n\n  const orderStock = function (product, quantity) {\n    cart.push({ product, quantity });\n    console.log(`${quantity} ${product} ordered from supplier`);\n  };\n\n  return {\n    addToCart,\n    cart,\n    totalPrice,\n    totalQuantiy,\n  };\n})();\n\nShoppingCart2.addToCart('apple', 4);\nShoppingCart2.addToCart('pizza', 2);\n\nconsole.log(ShoppingCart2.shippingCost); // undefined, no se puede acceder porque la funcion no permite. Cosas de los enclousures */\n/* \nimport cloneDeep from './node_modules/lodash-es/cloneDeep.js';\n\nconst state = {\n  cart: [\n    { product: 'bread', quantity: 5 },\n    { product: 'pizza', quantity: 3 },\n  ],\n  user: { loggedIn: true },\n};\n\nconst stateClone = Object.assign({}, state);\nconst stateDeepClone = cloneDeep(state);\n\nstate.user.loggedIn = false;\n\nconsole.log(stateClone);\n\nconsole.log(stateDeepClone);\n */\n"],"names":[],"version":3,"file":"index.672d4772.js.map","sourceRoot":"/__parcel_source_root/"}